# -*- coding: utf-8 -*-
"""STA PROJECT (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12OnXN10WoNSCj-p6-Pbn7jZLdHlSl4Uv
"""

!pip install requests_cache
!pip install selenium
!pip install webdriver_manager

from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException

driver = webdriver.Chrome(ChromeDriverManager().install())

engineering_and_technology_2024 = []
driver.get("https://www.timeshighereducation.com/world-university-rankings/2024/world-ranking")
select=driver.find_element(by=By.NAME,value='datatable-1_length')
select.send_keys("All")

engineering_and_technology_colleges_url = driver.find_elements_by_xpath('//tbody//tr[@role="row"]')
for college in engineering_and_technology_colleges_url:

    dict={}

    try:
        college_rank = college.find_element_by_xpath('.//td[@class="rank sorting_1 sorting_2"]').get_attribute("textContent")
        print(college_rank)
        college_link = college.find_element_by_xpath('.//td[@class=" name namesearch"]//a[@class="ranking-institution-title"]').get_attribute("href")
        college_title = college.find_element_by_xpath('.//td[@class=" name namesearch"]//a[@class="ranking-institution-title"]').get_attribute("textContent")
        college_location_link = college.find_element_by_xpath('.//div[@class="location"]//a').get_attribute("href")
        college_location_name = college.find_element_by_xpath('.//div[@class="location"]//a').get_attribute("textContent")
        college_fte_students = college.find_element_by_xpath('.//td[@class=" stats stats_number_students"]').get_attribute("textContent")
        college_number_of_students_per_staff = college.find_element_by_xpath('.//td[@class=" stats stats_student_staff_ratio"]').get_attribute("textContent")
        college_international_students = college.find_element_by_xpath('.//td[@class=" stats stats_pc_intl_students"]').get_attribute("textContent")
        college_female_male_ratio = college.find_element_by_xpath('.//td[@class=" stats stats_female_male_ratio"]').get_attribute("textContent")
        college_inter_science_research = college.find_element_by_xpath('.//td[@class=" stats stats_proportion_of_isr"]').get_attribute("textContent")

    except NoSuchElementException:
        print("At least one element not found")

    print(college_link)

    dict['college_link'] = college_link
    dict['college_title'] = college_title
    dict['college_location_link'] = college_location_link
    dict['college_location_name'] = college_location_name
    dict['college_fte_students'] = college_fte_students
    dict['college_number_of_students_per_staff'] = college_number_of_students_per_staff
    dict['college_international_students'] = college_international_students
    dict['college_female_male_ratio'] = college_female_male_ratio
    dict['college_inter_science_research'] = college_inter_science_research

    engineering_and_technology_2024.append(dict)

count = 0
for college in engineering_and_technology_2024[855:]:

    college_address = None
    college_salary_after_10_years = None
    college_out_of_state_tuition_and_fees = None
    driver.get(college.get('college_link'))

    try:
        count+=1
        print(count)
        college_address = driver.find_element_by_xpath('//div[@class="institution-info__contact-detail institution-info__contact-detail--address"]').get_attribute("textContent")
        college_salary_after_10_years_text = driver.find_element_by_xpath('//div[@class="keystats salary_10_years"]')
        college_salary_after_10_years = college_salary_after_10_years_text.find_element_by_xpath('preceding-sibling::div').get_attribute("textContent")
        college_out_of_state_tuition_and_fees_text = driver.find_element_by_xpath('//div[@class="keystats fees_oos"]')
        college_out_of_state_tuition_and_fees = college_out_of_state_tuition_and_fees_text.find_element_by_xpath('preceding-sibling::div').get_attribute("textContent")

    except NoSuchElementException:
        print("At least one element not found")

    college['college_address'] = college_address
    college['college_salary_after_10_years'] = college_salary_after_10_years
    college['college_out_of_state_tuition_and_fees'] = college_out_of_state_tuition_and_fees

def remove_words(college_title,words_to_remove):
    words = college_title.split()
    filtered_words = [word for word in words if word.lower() not in words_to_remove]
    college_title = ' '.join(filtered_words)
    return college_title

import string
def modify_college_title(college_title):
    college_title = college_title.lower()
    translator = str.maketrans("", "", string.punctuation)
    # Use the translation table to remove punctuation
    college_title = college_title.translate(translator)
    words_to_remove = ['of','the']
    college_title = remove_words(college_title,words_to_remove)
    college_title = college_title.replace(' ', '-')
    return college_title

for college in engineering_and_technology_2024:
    college['modified_college_title'] = modify_college_title(college.get('college_title'))

qs_prefix_url = "https://www.topuniversities.com/universities/"
count = 0
for college in engineering_and_technology_2024:

    driver.get(qs_prefix_url + college.get('modified_college_title'))
    college_gre = None
    college_gpa = None
    college_ielts = None
    college_toefl = None
    college_sat = None

    try:
        count+=1
        print(count)
        college_gre_text = driver.find_element_by_xpath("//label[contains(text(), 'GRE')]")
        college_gre = college_gre_text.find_element_by_xpath("following-sibling::div").text
        college_gpa_text = driver.find_element_by_xpath("//label[contains(text(), 'GPA')]")
        college_gpa = college_gpa_text.find_element_by_xpath("following-sibling::div").text
        college_ielts_text = driver.find_element_by_xpath("//label[contains(text(), 'IELTS')]")
        college_ielts = college_ielts_text.find_element_by_xpath("following-sibling::div").text
        college_toefl_text = driver.find_elements_by_xpath("//label[contains(text(), 'TOEFL')]")
        college_toefl = college_toefl_text[0].find_element_by_xpath("following-sibling::div").text
        college_sat_text = driver.find_element_by_xpath("//label[contains(text(), 'SAT')]")
        college_sat = college_sat_text.find_element_by_xpath("following-sibling::div").text

    except NoSuchElementException:
        print("At least one element not found")

    print(college_gre)
    college['college_gre'] = college_gre
    college['college_gpa'] = college_gpa
    college['college_ielts'] = college_ielts
    college['college_toefl'] = college_toefl
    college['college_sat'] = college_sat

file_path = "engineering_and_technology_2024_final_with_address_and_scores.json"

with open(file_path, "w") as json_file:
    json.dump(engineering_and_technology_2024, json_file)

print("Data saved to:", file_path)

from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


driver = webdriver.Chrome(ChromeDriverManager().install())

import time
country_ranking_by_education_standard = {}

driver.get('https://www.datapandas.org/ranking/education-rankings-by-country')
time.sleep(10)
country_ranking_table = driver.find_elements_by_xpath('//tbody[@class="metric-list-container"]//tr')


for country in country_ranking_table:
    country_name = country.find_element_by_xpath('.//td[@class="location_list"]').text
    country_rank = country.find_element_by_xpath('.//td[@class="metric_list"]').text

    country_ranking_by_education_standard[country_name.lower()] = country_rank

print(country_ranking_by_education_standard)

import json
with open('engineering_and_technology_2024_final_with_address_and_scores.json', 'r') as file:
    # Load JSON data from the file into a list of dictionaries
    engineering_and_technology_2024 = json.load(file)

for college in engineering_and_technology_2024:
    college['country_rank_by_education'] = country_ranking_by_education_standard.get(college['college_location_name'].lower())

file_path = "world_qs_rankings_dict_1.json"

with open(file_path, "w") as json_file:
    json.dump(engineering_and_technology_2024, json_file)

print("Data saved to:", file_path)

import time
country_info = {}
print(country_info)
count=0
for college in engineering_and_technology_2024:
    print(count)
    if college['college_location_name'] not in country_info:

        driver.get(college['college_location_link'])

        try:
            dict = {}

            if count==0:
                accept_button = driver.find_element_by_xpath('//button[@id="CybotCookiebotDialogBodyButtonAccept"]')
                accept_button.click()

            driver.implicitly_wait(3)

            country_enrollment_rate_in_higher_education_text = driver.find_element_by_xpath("//span[contains(text(), 'Enrollment rate in higher education')]")
#             country_enrollment_rate_in_higher_education_text = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, "//span[contains(text(), 'Enrollment rate in higher education')]")))
            country_enrollment_rate_in_higher_education = country_enrollment_rate_in_higher_education_text.find_element_by_xpath("following-sibling::span").text

            country_population_text = driver.find_element_by_xpath("//span[contains(text(), 'Population')]")
            country_population = country_population_text.find_element_by_xpath("following-sibling::span").text

            unemployment_text = driver.find_element_by_xpath("//span[contains(text(), 'Unemployment')]")
            unemployment = unemployment_text.find_element_by_xpath("following-sibling::span").text

            annual_gdp_text = driver.find_element_by_xpath("//span[contains(text(), 'Annual GDP')]")
            annual_gdp = annual_gdp_text.find_element_by_xpath("following-sibling::span").text

            college['country_enrollment_rate_in_higher_education'] = country_enrollment_rate_in_higher_education
            college['country_population'] = country_population
            college['country_unemployment'] = unemployment
            college['country_annual_gdp'] = annual_gdp

            dict['country_enrollment_rate_in_higher_education'] = country_enrollment_rate_in_higher_education
            dict['country_population'] = country_population
            dict['country_unemployment'] = unemployment
            dict['country_annual_gdp'] = annual_gdp

            country_info[college['college_location_name']] = dict

        except NoSuchElementException:
            print("At least one element not found")

    else:
        college['country_enrollment_rate_in_higher_education'] = country_info[college['college_location_name']].get('country_enrollment_rate_in_higher_education')
        college['country_population'] = country_info[college['college_location_name']].get('country_population')
        college['country_unemployment'] = country_info[college['college_location_name']].get('country_unemployment')
        college['country_annual_gdp'] = country_info[college['college_location_name']].get('country_annual_gdp')

    count+=1

file_path = "world_qs_rankings_dict_3.json"

with open(file_path, "w") as json_file:
    json.dump(engineering_and_technology_2024, json_file)

print("Data saved to:", file_path)